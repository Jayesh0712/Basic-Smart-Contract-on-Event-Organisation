// SPDX-License-Identifier: MIT
pragma solidity >=0.5.0 <0.9.0;

contract EventContract{
    struct Event{
        address organiser;
        string name;
        uint date;
        uint price;
        uint ticketcount;
        uint ticektRemain;
    }

    mapping(uint=>Event) public events;
    mapping(address=>mapping(uint=>uint)) public tickets;
    uint public nextId;

    function createEvent(string memory name,uint date,uint price,uint ticketcount) external{
        require(date>block.timestamp,"You can organise event for future date");
        require(ticketcount>0 , "You can organise the event if you create more than 0 tickets");
        events[nextId] = Event(msg.sender,name,date,price,ticketcount,ticketcount);
        nextId++;
    }

    function buyTicket(uint id,uint quantity)external payable {
        require(events[id].date!=0,"Event doesn't exist");
        require(events[id].date>block.timestamp,"Event already concluded");
        Event storage _event = events[id];
        require(msg.value==(_event.price*quantity),"Ethere is not enough");
        require(_event.ticektRemain>=quantity,"Not enought tickets");
        _event.ticektRemain-=quantity;
        tickets[msg.sender][id]+=quantity;

    }

    function transferTicket(uint id,uint quantity,address to) external {
        require(events[id].date!=0,"Event does not exist");
        require(events[id].date>block.timestamp,"Event already concluded");
        require(tickets[msg.sender][id]>=quantity,"You do not have enough tikcets");
        tickets[msg.sender][id]-=quantity;
        tickets[to][id]+=quantity;
    }
}

